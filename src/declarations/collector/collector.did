type ShareCycleError = 
 variant {
   CustomError: record {
                  code: nat;
                  message: text;
                };
   NotEnoughCycles: record {
                      nat;
                      nat;
                    };
 };
type ShareArgs = 
 vec record {
       namespace: text;
       share: nat;
     };
type DepositResult = 
 record {
   balance: nat;
   block_index: BlockIndex;
 };
type Collector = 
 service {
   /// * Lets the NFT accept cycles.
   ///     * @returns {Nat} - The amount of cycles accepted.
   icrc85_deposit_cycles: (ShareArgs) ->
    (variant {
       Err: ShareCycleError;
       Ok: nat;
     });
   /// * Lets the NFT accept cycles.
   ///     * @returns {Nat} - The amount of cycles accepted.
   icrc85_deposit_cycles_notify: (ShareArgs) -> () oneway;
   wallet_withdraw: (nat, opt principal) -> (DepositResult);
 };
type BlockIndex = nat;
service : () -> Collector
